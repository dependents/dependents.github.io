{
  "name": "Dependents",
  "tagline": "Use any editor, master any codebase",
  "body": "### Dependents\r\n\r\nCurrently supports JavaScript (AMD, CommonJS, and ES6) and CSS Preprocessor (Sass and Stylus) codebases.\r\n\r\n1. [Installation](#installation)\r\n2. [Configuring Settings](#configuring-settings)\r\n3. [Usage](#usage)\r\n - [Jump to Dependency](#jump-to-a-dependency)\r\n - [Find Dependents](#find-the-dependents-of-the-current-module)\r\n - [Find Relevant App Entry Points](#find-relevant-app-entry-points)\r\n - [View Dependency Tree](#view-dependency-tree)\r\n - [Copy Path to Clipboard](#copy-path-to-clipboard)\r\n4. [Bindings](#bindings)\r\n6. [Reporting an Issue](#reporting-an-issue)\r\n7. [Contributing to Dependents](https://github.com/mrjoelkemp/sublime-dependents/blob/master/Contributing.md)\r\n\r\n### Node.js Dependency\r\n\r\nYou **must** have [Node.js](https://nodejs.org/) installed on your system. Anything v0.10 and above is fine.\r\n\r\n* Note: The Node.js windows installer will add the install directory to the `PATH` variable but you must reboot to reload it.\r\n\r\nIf you have issues with running Node.js from within the package see the `node_path` setting under [configuring settings](#configuring-settings) below.\r\n\r\n* nvm users will need to supply their `node_path`\r\n\r\n* For a `.deprc` shared with a team, consider not committing `node_path` changes (as it's only for your machine).\r\n * Run `git update-index --assume-unchanged .deprc` to ignore changes\r\n * Run `git update-index --no-assume-unchanged .deprc` to track changes again\r\n * This is currently a workaround.\r\n\r\n### Configuring settings\r\n\r\nPut a `.deprc` file in the root directory of your project. See below for all possible settings.\r\n\r\nAt a minimum, you must specify a `root` or `styles_root`.\r\n\r\n```\r\n{\r\n  \"root\": \"path/to/all/js/files\",\r\n  \"styles_root\": \"path/to/my/stylesheets\",\r\n  \"require_config\": \"path/to/my/requirejs/config.js\",\r\n  \"build_config\": \"path/to/requirejs/build.json\",\r\n  \"webpack_config\": \"path/to/my/webpack.config.js\",\r\n  \"exclude\": ['jquery.js', 'require.js', 'vendor']\r\n}\r\n```\r\n\r\n* Note: If you want to specify the directory root as a value, please use `'./'`\r\n* Tip: If you like to open a separate windows in sublime for subdirectories of your project just put a `.deprc`\r\nfile there too with the reduced/correct relative paths.\r\n\r\n**General Settings**\r\n* `node_path`: (Optional) path to your node installation.\r\n * A properly set `PATH` environment variable should preclude having to use this but for unusual cases we provide this setting.\r\n * `/usr/local/bin` is install path on OSX and Linux.\r\n * In windows the `PATH` is set during by the Node.js installer (be sure to reboot).\r\n\r\n**JavaScript Settings**\r\n* `root`: the ultimate/root path at which to limit js dependent searching.\r\n* `config`: (Optional) the path to your requirejs configuration file\r\n* `webpack_config`: (Optional) the path to your webpack configuration file\r\n* `exclude`: (Optional) a list of paths and/or folder names to exclude from the search for dependents\r\n * Omitting folders that contain 3rd party libraries can drastically speed up the search for a large codebase.\r\n * The following folders are excluded by default: `node_modules`, `bower_components`, `vendor`\r\n* `build_config`: (Optional) path to your RequireJS build configuration file\r\n * This can have a \"modules\" section that lists your bundles (entry points), otherwise we'll search for them automatically\r\n  * Supplying this yields a significant performance speedup when finding relevant app entry points\r\n\r\n**CSS Settings**\r\n* `styles_root`: the ultimate/root path for your stylesheets.\r\n * Tip: For Sass, this package works great if you follow the architecture guidelines at [sass-guidelines](http://sass-guidelin.es/#architecture).\r\n\r\n### Usage\r\n\r\nThere are four ways to trigger the package's commands\r\n\r\n* From Main Menu `File -> Dependents`\r\n* From Context `Right click -> Dependents`\r\n* Via keyboard [see the key bindings](#key-bindings)\r\n* Via mouse click [see the mouse bindings](#mouse-bindings)\r\n\r\n#### Jump to a dependency\r\n\r\nQuickly jump to a file that the current file @imports (sass/stylus) or requires (js)\r\n\r\n![Jump to Dependency gif](http://i.imgur.com/GGlD8Uf.gif?1)\r\n\r\n1. Within a file, place your cursor over the dependency path you want to go to\r\n2. Then trigger the `Jump to dependency` command in one of the four ways noted above.\r\n\r\n*For javascript* if a dependency is aliased, you'll need to supply the path to your requirejs or webpack configuration\r\n\r\n#### Find the dependents of the current module\r\n\r\nDependents are files that immediately depend/require/import the current file.\r\n\r\n![Find Dependents gif](http://i.imgur.com/Ol4i7a5.gif)\r\n\r\nTrigger the `Find dependents` command in one of the four ways noted above.\r\n\r\n* If dependents are found, you'll see them in a dropdown.\r\n * You can select any of the items in the panel to jump to that file\r\n * If there's only one dependent, you'll be taken to that dependent file directly.\r\n* If no dependents are found a popup will be shown\r\n\r\nYou can also open all of the dependents at once:\r\n\r\n1. Within a file, right click to open up a menu\r\n2. Click on `Dependents -> Open all dependents` to open all dependent files in the editor\r\n\r\n#### Find relevant app entry points\r\n\r\nFind relevant application entry points that depend on the current file\r\nsomewhere within their dependency tree\r\n\r\n1. Within a file, right click to open the context menu\r\n2. Click on `Dependents -> Find relevant app entry points`\r\n\r\nYou can also open all relevant app entry points at once via:\r\n\r\n1. Within a file, right click to open the context menu\r\n2. Click on `Dependents -> Open all relevant app entry points`\r\n\r\n#### View dependency tree\r\n\r\nView a snapshot of the current file's dependency tree (as a JSON file)\r\n\r\n![View Dependency Tree gif](http://i.imgur.com/DVwRHbp.gif)\r\n\r\n1. Within a file, right click to open the context menu\r\n2. Click on `Dependents -> View this file's dependency tree`\r\n\r\n#### Copy path to clipboard\r\n\r\nCopy the rootless path of the current module to the clipboard. (JS and Sass)\r\n\r\n![Copy Path gif](http://i.imgur.com/iDNeMUP.gif)\r\n\r\nFor example, if the root is `assets/js` and the filename is `path/to/assets/js/myFeature/file.js`,\r\nthen the command will copy `myFeature/file` to the clipboard.\r\n\r\nThis is useful when you want to include the current module as a dependency of another module.\r\n\r\n1. Within a file, right click to open the context menu\r\n2. Click on `Dependents -> Copy path to the clipboard`\r\n\r\nOr via its key binding. Please check with your editor integration of Dependents for key bindings.\r\n\r\nFeel free to chat with me on [Gitter](https://gitter.im/mrjoelkemp/Dependents) if you need help or ping me [@mrjoelkemp](https://twitter.com/mrjoelkemp).",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}